#!/usr/bin/env bash
# shellcheck disable=SC2034 # appears unused, many are used in templates
# ---
# default functions to setup BUILD_VARS
# BUILD_VARS are used in the build.sh and a makefile.env is created
# that is imcluded at the start of the Makefile to share vars
# ---
set -eo pipefail # strict mode https://bit.ly/36MvF0T
source "$(dirname "${BASH_SOURCE[0]}")"/core/main
core.import "logit"
core.import "utils"
core.import "yaml"
core.import "git_tools"
core.import "dotenv"
core.import "setVar"

# version.properties should be in root dir
if [ -e "version.properties" ]; then source version.properties; fi

# main make env, this is called early.
# $1 - BUILD_ENV (test, dev, seed)
function make_env {
  make_env_init "${1:-}"
  createEnvFile
}

# create build/make_env_db.env for importing into makefile.
# $1 - BUILD_ENV (test, dev, seed)
function make_env_init {
  setVar BUILD_ENV "${1:-test}"
  init_env
  init_db_env  #if DBMS env is set
}

# initializes the environment
function init_env {
  version=${version:-}
  [ "$version" ] && init_versions
  logit.info "init_env start with version $version"

  # if we passed in a file name
  # load_env "${env:-}"

  # if we pass in an sh to brute force it
  load_custom_sh_or_env
  # sh="${sh:-}"
  # if [ "${sh}" ]; then
  #   logit.info "Sourcing file ${sh}"
  #   source "${sh}"
  # fi

  # if a developer has a local dotenv then bring it in
  load_env ".env"

  # if build/vault/bot.env has been cloned this will import the vars
  # parse_bot_env_file

  # check for a build.env
  load_env "build.env"

  # if this is running in circle then this will normailze ENV variables to ours
  circle_init_env

  # imports vars from the build.yml
  init_from_build_yml

  # defaults
  init_defaults # call again after init_from_build_yml

  # kubernetes wants lower case so to comply we make some of them lower
  make_some_vals_lowercase

  if declare -f "post_init" > /dev/null; then
    # call post init function if it exists
    post_init
  fi
}

# makes sure defaults are setup
function init_defaults {
  set +u
  # important to remeber that setVar registers the var in BUILD_VARS
  # but only sets the passed in value when the variable is unset or empty
  PROJECT_FULLNAME="${PROJECT_FULLNAME:-}" # default to empty if not set
  [ ! "$PROJECT_FULLNAME" ] && project_fullname_from_git_remote
  add_build_vars PROJECT_FULLNAME

  # defaults the project name to the part after last /, so if fullname is 'foo/bar' then project name will be 'bar'
  setVar PROJECT_NAME "${PROJECT_FULLNAME##*/}"

  # logit.info "APP_NAME-$APP_NAME"
  setVar APP_NAME "${PROJECT_NAME}"
  # the dir where the app is, defaults to the root of the project
  setVar APP_DEPLOY_SRC "./deploy"
  setVar APP_DOCKER_SRC "${APP_DEPLOY_SRC}/docker"
  setVar APP_KUBE_SRC "${APP_DEPLOY_SRC}/kube"

  setVar APP_KEY "${APP_NAME}"

  # if dry_run then force RELEASABLE_BRANCH to the current git branch.
  if [[ "${dry_run:-}" ]]; then
    local cur_branch=$(current_git_branch)
    setVar RELEASABLE_BRANCH "$cur_branch"
    # RELEASABLE_BRANCH_OR_DRY_RUN can be true even if it is a snapshot
    setVar RELEASABLE_BRANCH_OR_DRY_RUN true
    logit.info "dry_run enabled, current_git_branch=$cur_branch RELEASABLE_BRANCH=$RELEASABLE_BRANCH "
  fi

  # default the releasable branch pattern and changelog name
  setVar RELEASE_BRANCH_REGEX "master|main|release/.+"
  setVar RELEASE_CHANGELOG "CHANGELOG.md"
  if [[ "${ACTIVE_BRANCH:-}" && "${ACTIVE_BRANCH}" =~ ^(${RELEASE_BRANCH_REGEX})$ ]]; then
    setVar RELEASABLE_BRANCH "$ACTIVE_BRANCH"
  fi

  # shellcheck disable=SC2034
  IS_RELEASABLE='' #IS_RELEASABLE will be true if its NOT a snapshot and on a releasable branch
  if [[ "${RELEASABLE_BRANCH:-}" && $(bool "${IS_SNAPSHOT:-}") = false ]]; then
    setVar IS_RELEASABLE true
  fi

  # RELEASABLE_BRANCH_OR_DRY_RUN can be true even if it is a snapshot
  if [[ "${dry_run:-}" || "${RELEASABLE_BRANCH:-}" ]]; then
    setVar RELEASABLE_BRANCH_OR_DRY_RUN true
  fi

  #IS_RELEASABLE will be true if its NOT a snapshot and its on a releasable branch
  # if dry_run is passed in then do it
  # if [[ "$dry_run" || "$IS_RELEASABLE" ]]; then
  #   setVar IS_RELEASABLE_OR_DRY_RUN true
  # fi

  # sets up defaults for PAGES if they are not setup already
  setVar PAGES_BUILD_DIR "$BUILD_DIR/gh-pages"
  setVar PAGES_BRANCH "gh-pages"

}

# sets up defaults vars for docker ninedb and dock builders
function init_from_build_yml {
  # if gradle
  if [ -e ./build.yml ]; then
    # creates the variables from build.yml, exclude certain keys that are for gradle only
    yaml.load "./build.yml" true "" "MAVEN|CODENARC|SPOTLESS"
    BUILD_VARS+=" ${YAML_VARS[*]} "
  fi
  return 0 # I don't understand why this is needed
}

# ---
# special handling, kubernetes requires all lower case for names so we abide
# and lowercase APP_KEY some of the values
# ---
function make_some_vals_lowercase {
  set +u
  [ "$APP_KEY" ] && APP_KEY=$(tolower "${APP_KEY}")
  [ "$APP_DOCKER_URL" ] && APP_DOCKER_URL=$(tolower "$APP_DOCKER_URL")
  [ "$APP_KUBE_INGRESS_URL" ] && APP_KUBE_INGRESS_URL=$(tolower "$APP_KUBE_INGRESS_URL")
  [ "$APP_KUBE_DB_SERVICE_NAME" ] && APP_KUBE_DB_SERVICE_NAME=$(tolower "$APP_KUBE_DB_SERVICE_NAME")
  set -u
}


# ---
# sets the version and sets up the other useful variables for that version such as
# VERSIONX_DOTLESS
# ---
function init_versions {
  # if nothing passing in the usee the lowercase version that should have come in from version.properties
  # local ver=${1:-$version}
  logit.debug "init_versions version $version, VERSION ${VERSION:-}"
  setVar VERSION "$version"
  setVar PUBLISHED_VERSION "${publishedVersion:-}"

  # shellcheck disable=SC2153 # Possible misspelling
  # cuts to the last dot
  local baseVersion="${VERSION%.*}"

  # VERSIONX is used for docker and k8s as we deploy latests minor version
  # also used to connect to the latest compatible database when that is relevant
  setVar VERSIONX "$baseVersion.x"
  #replace dots with - so 10.0.x turns into v10-0-x. k8s can't have dots in names
  setVar VERSIONX_DOTLESS "v${VERSIONX//./-}"

  putVar BUILD_VERSION "$VERSION"

  # if its a snapshot then append the SNAPSHOT
  if truthy "${snapshot:-}"; then
    putVar VERSION_POSTFIX "-SNAPSHOT"
    putVar IS_SNAPSHOT true
    BUILD_VERSION+="-SNAPSHOT"
    VERSIONX_DOTLESS+="-SNAPSHOT"
  fi

  return 0
}

# Checks for CIRCLECI and normalizes some ENV vars that are availiable
function circle_init_env {
  CIRCLECI="${CIRCLECI:-}" # default to empty
  # if CIRCLE_BRANCH is set then consider it setup
  if [ "$CIRCLECI" ]; then
    setVar CI true
    setVar ACTIVE_BRANCH "$CIRCLE_BRANCH"
    setVar PROJECT_FULLNAME "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
    # setVar GIT_REPO_URL "$CIRCLE_REPOSITORY_URL"
  fi
}

# if it has a DBMS then this kicks in the db related variables
function init_db_env {
  if [ ! "${DBMS:-}" ]; then
    return 0
  fi
  # arg $1 must always be the database, defaults to mysql if nothing specified
  setVar DBMS "$DBMS"
  setVar DOCK_DB_BUILD_NAME "$DBMS-build"

  # **** DB Vars (MYSQL by default) ****
  setVar DB_HOST 127.0.0.1
  setVar DB_PORT 3306
  # PASS_VAR_NAME is the environment variable name that the docker dbs require. will be different based on vendor
  setVar PASS_VAR_NAME "MYSQL_ROOT_PASSWORD"

  if [ "$DBMS" == "mysql" ]; then
    PASS_VAR_NAME="MYSQL_ROOT_PASSWORD"
    DB_PORT=3306
  elif [ "$DBMS" == "sqlserver" ]; then
    PASS_VAR_NAME="SA_PASSWORD"
    DB_PORT=1433
  elif [ "$DBMS" == "postgresql" ]; then
    PASS_VAR_NAME="POSTGRES_PASSWORD"
    DB_PORT=5432
  fi

  if [ "${USE_DOCKER_DB_BUILDER:-}" = "true" ]; then
    setVar DockerDbExec "docker exec ${DOCK_DB_BUILD_NAME}"
    # if /.dockerenv this is inside a docker (such as circleCI) already
    # then we don't want to run docker in dockers, so blank it out
    if [ -f /.dockerenv ] || [ "${CI:-}" == "true" ]; then
      DockerDbExec=""
    fi
  fi

  # if we are inside the docker builder but not in circleCI force the DB_HOST
  if [ -f /.dockerenv ] && [ "${CI:-}" != "true" ]; then
    setVar DB_HOST "${DOCK_DB_BUILD_NAME}"
  fi
}



# create env file from BUILD_VARS for importing into makefile.
function createEnvFile {
  local env_file="$MAKE_ENV_FILE" # exported from shipkit-main
  local env_file_dir="$(dirname "$env_file")"
  mkdir -p "$env_file_dir"

  echo "# ----- Generated from init_env --------" > "$env_file"
  for varName in $BUILD_VARS; do
      val=${!varName}
      echo "$varName=$val" >> "$env_file"
  done
  echo "BUILD_VARS=$BUILD_VARS" >> "$env_file"
  logit.debug "created $env_file"
}

# looks for build/vault/bot.env file and loads it in if its there
# normally the flow for CI would be as an early step to clone the git project with the file there
# then do the process for "git secret reveal" to decrypt it.
# this is then called in the normal init_env process from projects build.sh
# right now the default is to parse bot.env and have its varibale
# OVERRIDE all others in the environment because we want them to override whats set in circle as env vars
function parse_bot_env_file {
  local bot_env="build/vault/bot.env"
  if [ -f $bot_env ]; then
    logit.info "loading bot.env file $bot_env"
    #change this once we have it sqaured away so exported env vars always win
    dotenv.load $bot_env true
  fi
}

# parses the env file, eval and load into BUILD_VARS
# $1 - the env file to parse
function load_env {
  local protectedVars="RELEASABLE_BRANCH|ACTIVE_BRANCH|VERSION|VERSIONX|IS_SNAPSHOT"
  if [ -f "$1" ]; then
    logit.info "loading env file $1"
    dotenv.load "$1" false "$protectedVars"
  fi

}

# parses the env file, eval and load into BUILD_VARS
# $1 - the env file to parse
function load_custom_sh_or_env {
  # if we pass in an sh to brute force it
  sh_env="${env:-}"
  if [ "${sh_env}" ]; then
    if [ ! -f "$sh_env" ]; then
      logit.error "[ env file not found:${sh_env} ]"
      return 1
    elif [[ "${sh_env}" == *.env ]]; then
      load_env "${sh_env}"
    elif [[ "${sh_env}" == *.sh ]]; then
      logit.info "Sourcing file ${sh_env}"
      source "${sh_env}"
    else
      logit.error "[ invalid env file: file name must end in either .env or .sh ]"
      return 1
    fi
  fi
}


# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "${BASHKIT_CORE}/function_runner.sh"
fi

