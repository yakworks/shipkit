#!/usr/bin/env bash
# -----------------
# functions for running the yakworks docmark mkdocs variant
# depends on bin/github_pages script
# ------------------

# set -euo pipefail # strict mode https://bit.ly/36MvF0T
source "$(dirname "${BASH_SOURCE[0]}")"/core/main
core.import "semver"
core.import "docker_tools"

DOCMARK_DOCKER_IMAGE=yakworks/docmark
DOCMARK_DOCKER_NAME=docmark-server

# Copies readme, updates version and replaces links that went into docs
# $1 - the version to update
function docmark.copy_readme {
  local index_md=docs/index.md
  rm -f "$index_md"
  cp README.md "$index_md"
  [[ "$1" ]] && replace_version "$1" "$index_md"
  # replace the (docs/ text in links as they are in same dir now, ex [foo](docs/bar.md) will become [foo](bar.md)
  sed -i.bak -e "s~(\s*docs\/~(~g" "$index_md" && rm "${index_md}.bak"
  return 0
}

# builds the groovydocs and copies them into site/api
function docmark.copy_groovydoc_to_api {
  cp -r build/docs/groovydoc build/site/api || true
}

function docmark.run {
  docker.start "$DOCMARK_DOCKER_NAME" -it \
    -w /project \
    -p 8000:8000 \
	  -v "$(pwd)":/project:delegated  \
		"$DOCMARK_DOCKER_IMAGE"
}

# use this to open shell and test circle commands
function docmark.shell {
  docker.start "$DOCMARK_DOCKER_NAME" --rm -it \
    --entrypoint /bin/bash \
    -p 8000:8000 \
	  -v "$(pwd)":/project:delegated  \
    -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
		"$DOCMARK_DOCKER_IMAGE"

  # GITHUB_TOKEN gitub token is passed from local env to docmark so we can test publish
}

# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "${BASHKIT_CORE}/function_runner.sh"
fi
