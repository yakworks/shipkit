#!/usr/bin/env bash
##
# jdk builder docker and database docker
# @DEPRECATED kept as ref for now
# ---

source "$(dirname "${BASH_SOURCE[0]}")"/core/main

# -----------------------------------
# starts a builder docker with a volume maps to gradle-docker and /project to the local dir
# maps port 8080 in case running tomcat server
# arg $1 - name of the docker
# arg $2 - the docker url, defaults to yakworks/builder:jdk8
function builderStart {
  durl=${2:-"yakworks/builder:jdk8"}
  # the .gradle-docker volume map is so that it keeps the gradle cache in your home dir
  # so we dont need to down load the internet each new docker instance
  docker.start "$1" -it -d \
    -w /project \
    -p 8081:8080 \
	  -v "$(pwd)":/project:delegated  \
		-v ~/.gradle-docker/:/root/.gradle:delegated \
		"$durl"
}


# -----------------------------------
# starts a db docker with a volume maps for current dir (`pwd`) to /project
# arg $1 - name of the docker
# arg $2 - the docker url in format repo:image_tag
# arg $3 - the db_port mapping in form 3306:3306 (1433 for sql server etc)
# arg $4+ - 4th and beyond are env variables. use for for default password (MYSQL_ROOT_PASSWORD, SA_PASSWORD)
# example: dock db_start mysql-ndb mysql:5.7 13306:3306 MYSQL_ROOT_PASSWORD=123Foo
function db_start {
  # ACCEPT_EULA is for sql server, just an env var so won't matter that its set for others
  docker.start "$1" \
    --network builder-net \
    -v "$(pwd)":/project -w /project \
    -e ACCEPT_EULA=Y \
    -p "$3"  \
    -e "$4" \
    -d "$2"
}

# helper to start docker db if Make is not an option. uses dev environment
# arg $1 - optional DB, defaults to mysql
function db-start {
  # env doesn't matter here so just set it to dev
  init_env dev "${1:-mysql}"
  db_start "${DOCK_DB_BUILD_NAME}" "${DOCKER_DB_URL}" "${DB_PORT}":"${DB_PORT}" "${PASS_VAR_NAME}"="${DB_PASSWORD}"
}

# -----
# meant to be run inside the mysql docker with docker exec
# $1 - host
# $2 - root password
# example: docker exec mysql-builder ./scripts/dock wait_for_mysql
function wait_for_mysql {
  host=${1:-127.0.0.1}
  echo "wait for mysql ..."
  while ! mysql -h "$host" --user=root --password="$2" -e "SELECT 1" >/dev/null 2>&1; do
    sleep 1
  done
}

# -----
# meant to be run inside the sql-server with docker exec
# $1 - host
# $2 - sa password
# example: docker exec sqlserver-builder ./scripts/dock wait_for_sqlserver
function wait_for_sqlserver {
  host=${1:-localhost}
  #/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'xxxx' -Q 'SELECT Name FROM sys.Databases'
  # sqlcmd -S $host -U SA -P $SA_PASSWORD -Q 'SELECT 1;'
  # for some reason sqlcmd needs to be fully qualified path for it to work on circleci
  while ! /opt/mssql-tools/bin/sqlcmd -S "$host" -U SA -P "$2" -Q 'SELECT Name FROM sys.Databases' >/dev/null 2>&1; do
    sleep 1
  done
}

# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "${BASHKIT_CORE}/function_runner.sh"
fi
