#!/bin/bash
#
# The original purpose here was to be able to set a variable that will be tracked and can then be
# eported back out to a file can be created and included into Make

# sets the variable value if its not already set and adds it for tracking in BUILD_VARS
# args $1 - the variable name
# args $2 - the variable value to set
function setVar {
  varName="$1"
  # varVal="$2"
  # curVal="${!varName}"
  # [[ ! ${!varName+x} ]]
  if [[ -z ${!varName} ]]; then
    # echo "curVal is empty, adding"
    eval "$varName=\"\$2\""
  fi
  add_build_vars $varName
}

# sets the variable value if its not already set and adds it for tracking in BUILD_VARS
# args $1 - the variable name
# args $2 - the variable value to set
function evalVar {
  varName="$1"
  # echo "$varName=\"$2\""
  eval "$varName=\"$2\""
  add_build_vars $varName
}

# sets the variable value and overwrites what was there before
# args $1 - the variable name
# args $2 - the variable value to set
function putVar {
  # declare -g "$1"="$2" # not working in older bash 3 on mac
  eval $1=\$2
  add_build_vars $1
}


# add the variable name to the BUILD_VARS list for use later in make or in logging
# args $1 - the variables
function add_build_vars {
  for bvar in "$@"; do
    if [[ ! $BUILD_VARS == *" $bvar "* ]]; then
      # echo "adding $bvar to BUILD_VARS"
      BUILD_VARS+="$bvar "
    fi
  done
}

# helper/debug function to log out the build_vars
function log-vars {
  sorted=$(printf "%s\n" $BUILD_VARS | sort)
  for varName in $sorted; do
    echo "$varName = ${!varName}"
  done
}
