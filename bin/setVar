#!/usr/bin/env bash

##
# setVar - sets and track variables
# ==================================
# Tracks the variables set in a `BUILD_VARS`` variable.
# Enables to set a variable that will be tracked and can then be
# exported back out to a file which can them be included into Make

set -eo pipefail # strict mode https://bit.ly/36MvF0T
core.import "logit"

##
# sets the variable value ONLY if it is not already set and adds it for tracking in `BUILD_VARS`
# ~~~
#   setVar "FOO" "BAR"
#   echo $FOO
#   -> BAR
# ~~~
# ARGS:
# - $1 - the variable name
# - $2 - the variable value to set
function setVar {
  set +u # allow unbound variables
  varName="$1"
  # varVal="$2"
  # curVal="${!varName}"
  # [[ ! ${!varName+x} ]]
  if [[ -z ${!varName} ]]; then
    # logit.info "$varName=\"\$2\""
    eval "$varName=\"\$2\""
  fi
  add_build_vars "$varName"
  set -u # don't allow unbound variables
}

##
# sets the variable value if its not already set and adds it for tracking in BUILD_VARS
# - $1 - the variable name
# - $2 - the variable value to set
function evalVar {
  varName="$1"
  # echo "$varName=\"$2\""
  eval "$varName=\"$2\""
  add_build_vars "$varName"
}

##
# sets the variable value and overwrites what was there before
# - $1 - the variable name
# - $2 - the variable value to set
function putVar {
  # declare -g "$1"="$2" # not working in older bash 3 on mac
  eval "$1"=\$2
  add_build_vars "$1"
}

##
# add the variable name to the BUILD_VARS list for use later in make or in logging
# - $1 - the variables
function add_build_vars {
  for bvar in "$@"; do
    if [[ ! $BUILD_VARS == *" $bvar "* ]]; then
      # echo "adding $bvar to BUILD_VARS"
      BUILD_VARS+="$bvar "
    fi
  done
}

# helper/debug function to log out the build_vars
function log-vars {
  sorted=$(printf "%s\n" "$BUILD_VARS" | sort)
  for varName in $sorted; do
    echo "$varName = ${!varName}"
  done
}
