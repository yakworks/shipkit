#!/usr/bin/env bash

##
# kube_tools - functions to help with kubernetes and deployment
#

set -e
source "$(dirname "${BASH_SOURCE[0]}")"/core/main
core.import "init_env"
core.import "heredoc_tpl"
core.import "dotenv"

##
# runs sed on the kubernetes tpl.yml and puts in build dir
# - $1 - the template file to apply
# - $2 - (optional) The directory to put the processed files in
function kube.process_tpl {
  # set the variables in BUILD_ENV so we can build the sed replacement for templates
  # dotenv.load "build/make/makefile${MAKELEVEL}.env"
  local processedDir="${2:-build/kube}"
  heredoc_tpl "$1" "$processedDir"
}

##
# Given a directory with templates and regular files in it, build a similar directory in build/kustomize which has the same structure but with templates processed.
# - $1 - The source directory to process (containing templates)
# - $2 - (optional) The directory to put the processed files.
# Output:
#   A directory build/kustomize/$1 which has all the files from $1, but templates translated per shipkit.
#  The directory is ready to be applied with kubectl apply -k build/kustomize/$1, but it's not applied.
function kube.process_tpl_dir {
  local oldwd=$(pwd)
  local hashdir=${2:-build/kustomize/$1}
  local processedDir=$(dirname "$oldwd/$hashdir")
  cd "$1"
  for tfile in *; do
    kube.process_tpl "$tfile" "$processedDir"
  done
  cd -
  echo "$processedDir"
}

###
# runs sed on the kubernetes tpl.yml template files to update and replace variables with values
# - $1 - the file template to process and apply
# - $2 - (optional) The directory to put the processed files in
function kube.apply_tpl {
  local processedDir="${2:-build/kube}"
  local processedTplFile=$(kube.process_tpl "$1" "$processedDir")
  echo "processed tpl -> $processedTplFile"
  kube.ctl apply -f "$processedTplFile"
}

##
# Applies everything in the given directory
# - $1 - The directory containing raw templates
# - $2 - (optional) The directory to put processed files
function kube.apply_tpl_dir {
  local processedDir="${2:-build/kustomize/$1}"
  kube.process_tpl_dir "$1" "$processedDir"
  kube.ctl apply -k "$processedDir"
  echo "$processedDir"
}

##
# creates namespace if it does not exist.
# ~~~
#   kube.create_namespace foo
# ~~~
# - $1 - the name of the namespace to be created
function kube.create_namespace {
  [ "${dry_run:-}" ] && echo "ðŸŒ® dry_run ->  kube.ctl create namespace $1" && return 0

  if [ ! "$(kubectl get ns | grep "$1" || true)" ]; then
    kube.ctl create namespace "$1"
  fi
}

##
# wrapper around kubectl so we can intercept execution if dry_run is set
# ~~~
#   kube.ctl create namespace foo
# ~~~
# - $@ - the commands to apply to kubectl
function kube.ctl {
  if [ "${dry_run:-}" ]; then
		echo "ðŸŒ® dry_run ->  kubectl $@"
	else
		kubectl "$@"
	fi
}

##
# runs kubectl apply on the passed in string
# - $1 - the yml string to apply
function kube.apply {
  echo "$1" | kube.ctl apply -f -
}

# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  export fn_namespace='kube' && source "${BASHKIT_CORE}/function_runner_ns.sh"
fi
