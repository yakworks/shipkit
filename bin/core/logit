#!/usr/bin/env bash
# Logging utility that simplifies user of bash logger command
# based on this from here https://gist.github.com/ttscoff/6708b082e151ed4910e85f3fde35e9ad
# others to look at
# https://github.com/Zordrak/bashlog/blob/master/log.sh

set -euo pipefail # strict mode https://bit.ly/36MvF0T

LOGIT_DEFAULT_DIR="${BUILD_DIR:-$HOME}/make"
LOGIT_DEFAULT_LOG="${LOGIT_DEFAULT_LOG:-shipkit}"
LOGIT_DEBUG_ENABLED=${LOGIT_DEBUG_ENABLED:-false}

unset LOGIT_LOG_NAME
unset LOGIT_SCRIPT_LOG

logit.info() {
  logit info "$@"
}
logit.debug() {
  logit debug "$@"
}
logit.warn() {
  logit warn "$@"
}
logit.error() {
  logit error "$@"
  echo "$@"
}

logit() {
  if [ "${LOGIT_DISABLED:-}" ]; then
    return 0
  fi
  LOGIT_DIR="${LOGIT_DIR:-$LOGIT_DEFAULT_DIR}"
	# default to "user" facility, can be set to local[0-9], etc.
  LOGIT_FACILITY="${LOGIT_FACILITY:-user}"
	# default to quiet, no output to STDERR
  LOGIT_VERBOSE="${LOGIT_VERBOSE:-false}"
	# default log tag and filename to "scripts", changed via logr start command
  LOGIT_LOG_NAME="${LOGIT_LOG_NAME:-$LOGIT_DEFAULT_LOG}"
  # the file to log out to
  LOGIT_SCRIPT_LOG="${LOGIT_SCRIPT_LOG:-${LOGIT_DIR%/}/${LOGIT_LOG_NAME}.log}"

	local function_name="${FUNCNAME[2]}"

  if [ ! -e "$LOGIT_SCRIPT_LOG" ]; then
    mkdir -p "${LOGIT_DIR}"
    touch "$LOGIT_SCRIPT_LOG"
  fi

  local log_type=$1
  if [[ $log_type =~ (^-v$|^verbose$) ]]; then
    LOGIT_VERBOSE=true
    shift
  elif [[ $log_type =~ (^-q$|^quiet$) ]]; then
    LOGIT_VERBOSE=false
    shift
  elif [[ $log_type =~ clea[nr] && $LOGIT_LOG_NAME != "$LOGIT_DEFAULT_LOG" ]]; then
		[[ -n $LOGIT_SCRIPT_LOG && -f $LOGIT_SCRIPT_LOG ]] && echo -n > "$LOGIT_SCRIPT_LOG"
    return 0

  fi

  local log_level=$1

  if [[ $log_level == "debug" ]]; then

    if [ "$LOGIT_DEBUG_ENABLED" = "true" ]; then
      # debug type shows full function stack
      # shellcheck disable=SC2141
      function_name=$(IFS="\\"; echo "${FUNCNAME[*]:1}")
      __logit_exec debug "${LOGIT_LOG_NAME}:${function_name}" "${*:2}"
    fi
	# log, notice, info, warn, error set logging level
	# warn and error go to /var/log/system.log as well as logfile
	elif [[ $log_level =~ ^(notice|log|info|warn(ing)?|err(or)?|emerg) ]]; then
		local level
		case $log_level in
			notice|log) level="notice" ;;
			info) level="info" ;;
			warn*) level="warning" ;;
			err*) level="err" ;;
			emerg) level="emerg" ;;
			*) level="info" ;;
		esac
		__logit_exec $level "${LOGIT_LOG_NAME}:${function_name}" "${*:2}"
	fi

}

# execute the logger command
# param 1: (string) [log|notice|info|debug|warn|error] log level
# param 2: (string) Tag
# param 3: (string) Message
__logit_exec() {
  # local cmd
  local log_level="${1:-}"
  if [ "$log_level" = "debug" ] && [ ! "$LOGIT_DEBUG_ENABLED" = "true" ]; then
    return 0 # exit fast
  fi

	if [[ $LOGIT_VERBOSE == true ]]; then
    # The 2>&1says "redirect file descriptor #2 to the same place #1 is going", and then you can pipe both of them at once.
		logger -p "${LOGIT_FACILITY}.$1" -t "$2" -s "$3" 2>&1 | tee -a "${LOGIT_SCRIPT_LOG}" 1>&2
	else
		logger -p "${LOGIT_FACILITY}.$1" -t "$2" -s "$3" 2>> "${LOGIT_SCRIPT_LOG}"
	fi
}

# logr $@
