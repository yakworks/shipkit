#!/usr/bin/env bash
set -euo pipefail # strict mode https://bit.ly/36MvF0T

# -----------------
# some common bash util helpers
# ------------------

# ---
# trims leading and trailing spaces or tabs from string
# $1 - the string to trim
# ---
function trim {
    # the blank area between brackets [ 	] has both a space and a tab
    echo "$1" | sed 's/^[ 	]*//' | sed 's/[ 	]*$//g'
}


# https://github.com/Jeff-Russ/bash-boolean-helpers/blob/master/bool-helpers.sh
# will echo if its falsy
# to be falsy a value could be false, "false", 0, "0", unset, empty string
# usage:
#   FOO=false
#   [ $(isFalsy "$FOO") ] && echo "FOO is falsy"
function isFalsy {
  local val="$1"
  if [[ ! $val || $val == false || $val = 0 ]]; then
    echo "false"
  fi
  #[ ! "$1" ] && echo "unsetOrEmpty"; [ "$1" = false ] && echo "isFalse"; [ "$1" = 0 ] && echo "is0"
}

# will echo if its not falsy
# usage:
#   FOO="anything not falsy"
#   [ $(isTruthy "$FOO") ] && echo "FOO is truthy"
function isTruthy {
  if [[ ! $(isFalsy "$1") ]]; then
    echo "true"
  fi
}

# converts to lower case
# $1 - what to convert
function tolower {
  echo "$1" | awk '{print tolower($0)}'
}

# converts to upper case
# $1 - what to convert
function toupper {
  echo "$1" | awk '{print toupper($0)}'
}

# greps the value from a properly formed env or properties file
# $1 - the prop name
# $2 - file name
# example file:
# FOO=bar
# `grepValue FOO` = bar
function grepValue {
    PROP_KEY=$1
    PROP_VALUE=`grep "^$PROP_KEY=" "$2" | cut -d'=' -f2`
    echo "$PROP_VALUE"
}

# lists all the function/methods for the bash script
function list-functions {
  shopt -s extdebug
  funcList=`compgen -A function`
  # echo $funcList
  for f in $funcList; do
    funcParts=`declare -F "$f"`
    arr=("$funcParts")
    local file=${arr[2]##*/}
    printf "%-25s %s:%s\n" "${arr[0]}" "${file}" "${arr[1]}"
  done
}

# $1 - the sring data
function escape_json_string {
  jdata=${1:-}
  # !! DO NOT INDENT THE LINE FEED BELOW, NEEDED FOR REPLACEMENT
  #! squinky hack alert coming up
  jdata=${jdata//
/~~~} # \n (newline to some squiglys ~~~ first then back to \n with sed below)
  jdata=${jdata//\\/\\\\} # \
  jdata=${jdata//\//\\\/} # /
  jdata=${jdata//\"/\\\"} # "
  jdata=${jdata//	/\\t} # \t (tab)
  jdata=${jdata//^M/\\\r} # \r (carriage return)
  # echo "$jdata"
  # shellcheck disable=SC2001
  echo "$jdata" | sed 's/~~~/\\n/g'
}

