#!/usr/bin/env bash

##
# circle - utils for working with CI circle and publishing,
# ======
# CIRCLE_TOKEN env variable should be set already with the token
#
# to trigger a circle repo
# ~~~bash
#   ./circle.sh trigger some_branch
# ~~~

source "$(dirname "${BASH_SOURCE[0]}")"/core/main
core.import "git_tools"

##
# uses curl to trigger a pipeline for a branch.
# Expect the CIRCLE_TOKEN to be set before calling. will try and setup the PROJECT_FULLNAME (slug) from current repo if not set
# NOTE: if the branch passed in does not exist then it will still run and end up using whatever is set as master branch.
# - $1 - the branch name. OPTIONAL, if not provided then will use git to read the current branch
circle.trigger-this(){
  local branch_name=${1:-}
  # read from github if not specified
  [ ! "$branch_name" ] && branch_name=$(git rev-parse --abbrev-ref HEAD)

  # if no project name then get it.
  [ ! "${PROJECT_FULLNAME:-}" ] && project_fullname_from_git_remote

  circle.trigger "${PROJECT_FULLNAME:-}" "$branch_name"

}

##
# uses curl to trigger a pipeline for a branch.
# Expect CIRCLE_TOKEN to be set before calling.
# NOTE: if the branch passed in does not exist then it will still run and end up using whatever is set as master branch.
# - $1 - the project name.
# - $2 - the branch name.
# @see circle.trigger-this() to trigger current project
circle.trigger(){
  local slug=${1:-}
  local branch_name=${2:-}

  local branch_data="{\"branch\":\"${branch_name}\"}"
  # if not branch then just blank it out and circle will use defualt
  [[ ! "$branch_name" ]] && branch_data=""

  echo "triggering slug: ${slug} branch_data: ${branch_data}"

  [[ ! "${slug}" ]] && echo "bad project slug" && return 1

	curl --location --request POST \
		"https://circleci.com/api/v2/project/github/${slug}/pipeline" \
		--header 'Content-Type: application/json' \
		-u "${CIRCLE_TOKEN}:" \
		--data "${branch_data}"
}

##
# opens the circle pipeline for this project in the default web browser. only works on mac right now.
circle.open(){
  # if no project name then get it from git remote
  [ ! "${PROJECT_FULLNAME:-}" ] && project_fullname_from_git_remote
  local circle_url="https://app.circleci.com/pipelines/github/${PROJECT_FULLNAME}"
  echo "opening ${circle_url}"
  open "${circle_url}"
}

# @ignore
# circle orb compare-url/reconstruct makes a CIRCLE_COMPARE_URL.txt and this will
# returns the commit range like 911ff1ea1fa5...a883787c2f50
# @deprecated
function circleCommitRange {
  CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt || true)
  # echo "CIRCLE_COMPARE_URL $CIRCLE_COMPARE_URL"
  echo "$CIRCLE_COMPARE_URL" | rev | cut -d/ -f1 | rev
}

# boiler plate function runner, keep at end of file
fn_namespace='circle'
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  # BASH_SOURCE will be true if this file is run as a script, if sourced into another this never gets run
  set -euo pipefail # strict mode https://bit.ly/36MvF0T
  export fn_namespace && source "${BASHKIT_CORE}/function_runner_ns.sh"
fi
